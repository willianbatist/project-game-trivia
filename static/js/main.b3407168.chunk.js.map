{"version":3,"sources":["trivia.png","redux/actions/index.js","services/tokenApi.js","pages/Login.js","components/Header.js","components/Answer.js","services/triviaApi.js","consts/index.js","pages/Game.js","pages/Settings.js","pages/Feedback.js","pages/Ranking.js","App.js","redux/reducers/Player.js","redux/reducers/Settings.js","redux/reducers/Token.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","tokenAction","state","type","token","playerAction","player","scoreAction","score","assertions","requestToken","a","fetch","response","json","data","Login","handleButton","callback","setState","localStorage","setItem","props","history","push","roteSettings","name","gravatarEmail","handleInput","bind","target","id","value","this","handleClick","className","autocomplete","src","logo","alt","htmlFor","data-testid","placeholder","onChange","disabled","includes","onClick","Component","connect","dispatch","Header","convertEmail","emailHash","md5","toString","Answer","answers","isDisabled","apiReturn","currQues","answerButton","map","answer","i","key","match","correct_answer","decode","fetchQuestions","category","difficulty","url","console","error","CLASS_BTN","Game","getQuestions","renewToken","triviaApi","response_code","newToken","newApiReturn","results","incorrectAnswers","incorrect_answers","correctAnswer","difScore","currAnswers","sort","Math","random","handleTimer","clearInterval","handleCounter","setInterval","prevState","time","answered","document","getElementsByClassName","global","forEach","button","classList","add","updateScore","allButtons","dataset","testid","redToFeedback","nextQuestion","remove","indexOf","isFetching","length","question","settings","Settings","handleSelect","saveSettings","setSettings","window","alert","homeButton","qType","settingsAction","Feedback","resultsHandler","scoreFeedback","playAgain","resetGame","toRankingPage","resetS","resetA","resetP","Ranking","handleRanking","picture","getItem","JSON","stringify","parse","ranking","goHome","b","App","exact","path","component","INITIAL_STATE","playerReducer","action","settingsReducer","tokenReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b3407168.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export const LOG_IN = 'LOG_IN';\nexport const TOKEN = 'TOKEN';\nexport const SCORE = 'SCORE';\nexport const SETTINGS = 'SETTINGS';\n\nexport const tokenAction = (state) => ({\n  type: TOKEN,\n  token: state,\n});\n\nexport const playerAction = (state) => ({\n  type: LOG_IN,\n  player: state,\n});\n\nexport const scoreAction = (score, assertions) => ({\n  type: SCORE,\n  score,\n  assertions,\n});\n\nexport const settingsAction = (category, difficulty, qType) => ({\n  type: SETTINGS,\n  category,\n  difficulty,\n  qType,\n});\n","const link = 'https://opentdb.com/api_token.php?command=request';\nconst requestToken = async () => {\n  try {\n    const response = await fetch(link);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default requestToken;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { tokenAction, playerAction } from '../redux/actions';\nimport requestToken from '../services/tokenApi';\nimport logo from '../trivia.png';\nimport './style/Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      token: '',\n      name: '',\n      assertions: 0,\n      score: 0,\n      gravatarEmail: '',\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  handleButton = async (callback) => {\n    const data = await requestToken();\n    this.setState({ token: data.token }, () => {\n      callback(this.state);\n    });\n    localStorage.setItem('token', data.token);\n    const { history } = this.props;\n    history.push('/game');\n  }\n\n  roteSettings = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  handleInput({ target }) {\n    const { id, value } = target;\n\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  render() {\n    const { name, gravatarEmail } = this.state;\n    const { handleClick } = this.props;\n    return (\n      <div className=\"login\">\n        <form className=\"form\" autocomplete=\"off\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <label htmlFor=\"name\" className=\"form__label\">\n            <input\n              id=\"name\"\n              data-testid=\"input-player-name\"\n              placeholder=\"Name\"\n              value={ name }\n              onChange={ this.handleInput }\n              className=\"form__label__input\"\n            />\n          </label>\n          <label htmlFor=\"email\" className=\"form__label\">\n            <input\n              id=\"gravatarEmail\"\n              data-testid=\"input-gravatar-email\"\n              placeholder=\"Email\"\n              value={ gravatarEmail }\n              onChange={ this.handleInput }\n              className=\"form__label__input\"\n            />\n          </label>\n          <section className=\"buttons\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              disabled={\n                !name\n                || !gravatarEmail\n                || !gravatarEmail.includes('@')\n                || !gravatarEmail.includes('.com')\n              }\n              onClick={ () => this.handleButton(handleClick) }\n              className=\"form__button\"\n            >\n              Play!\n            </button>\n            <button\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              onClick={ () => this.roteSettings() }\n              className=\"form__button settings\"\n            >\n              Settings\n            </button>\n          </section>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleClick(state) {\n    dispatch(playerAction(state));\n    dispatch(tokenAction(state.token));\n  },\n});\n\nLogin.propTypes = {\n  handleClick: PropTypes.func,\n  push: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport '../pages/style/Header.css';\n\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      emailHash: '',\n    };\n  }\n\n  componentDidMount() {\n    this.convertEmail();\n  }\n\n  convertEmail = () => {\n    const { gravatarEmail } = this.props;\n    this.setState({ emailHash: md5(gravatarEmail).toString() });\n  }\n\n  render() {\n    const { name, score } = this.props;\n    const { emailHash } = this.state;\n\n    return (\n      <header className=\"header\">\n        <section className=\"name-logo\">\n          <img\n            data-testid=\"header-profile-picture\"\n            alt=\"profile_image\"\n            src={ `https://www.gravatar.com/avatar/${emailHash}` }\n          />\n          <h1 className=\"name\">\n            Player:\n            {' '}\n            <span data-testid=\"header-player-name\">{ name }</span>\n          </h1>\n        </section>\n        <h2 className=\"score\">\n          Score:\n          {' '}\n          <span data-testid=\"header-score\">{ score }</span>\n        </h2>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: propTypes.string,\n  gravatarEmail: propTypes.string,\n  assertions: propTypes.number,\n  score: propTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => {\n  const { player: { name, gravatarEmail, assertions, score } } = state;\n  return {\n    name, gravatarEmail, assertions, score,\n  };\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { decode } from 'he';\n\nexport default class Answer extends Component {\n  render() {\n    const { answers, isDisabled, apiReturn, currQues, answerButton } = this.props;\n    return (\n      answers\n        .map((answer, i) => (\n          <button\n            type=\"button\"\n            key={ i }\n            data-testid={\n              answer.match(apiReturn[currQues].correct_answer)\n                ? 'correct-answer'\n                : `wrong-answer-${i}`\n            }\n            className=\"game-main__answer-section__answer\"\n            disabled={ isDisabled }\n            onClick={ answerButton }\n          >\n            {decode(answer)}\n          </button>\n        ))\n    );\n  }\n}\n\nAnswer.propTypes = {\n  answers: propTypes.array,\n  isDisabled: propTypes.bool,\n  apiReturn: propTypes.array,\n  currQues: propTypes.number,\n  answerButton: propTypes.func,\n  correct_answer: propTypes.string,\n}.isRequired;\n","const fetchQuestions = async (token, category, difficulty, type) => {\n  try {\n    const url = `https://opentdb.com/api.php?amount=5&token=${token}&category=${category}&difficulty=${difficulty}&type=${type}`;\n    const response = await fetch(url);\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport default fetchQuestions;\n","export const ERROR_RESPONSE = 3;\nexport const QUESTIONS_LENGTH = 5;\nexport const RANDOM_ASSIST = 0.5;\nexport const INDEXOF_ASSIST = -1;\nexport const MIL = 1000;\nexport const LOADING = 'Loading...';\nexport const CORRECT_ANSWER = 'correct-answer';\nexport const BASE_SCORE = 10;\nexport const EASY_SCORE = 1;\nexport const MEDIUM_SCORE = 2;\nexport const HARD_SCORE = 3;\nexport const CLASS_BTN = 'game-main__answer-section__answer';\nexport const ASSERTIONS = 3;\n","import propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { decode } from 'he';\nimport Header from '../components/Header';\nimport Answer from '../components/Answer';\nimport triviaApi from '../services/triviaApi';\nimport { tokenAction, scoreAction } from '../redux/actions';\nimport requestToken from '../services/tokenApi';\nimport * as global from '../consts';\nimport './style/Game.css';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = { apiReturn: [],\n      currAnswers: [],\n      currQues: 0,\n      time: 30,\n      isDisabled: false,\n      score: 0,\n      assertions: 0,\n      difScore: 0,\n      answered: false,\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.handleTimer();\n  }\n\n  getQuestions = async () => {\n    const { token, renewToken, category, difficulty, type } = this.props;\n    const { currQues } = this.state;\n    const apiReturn = await triviaApi(token, category, difficulty, type);\n\n    try {\n      if (apiReturn.response_code === global.ERROR_RESPONSE) {\n        const newToken = await requestToken();\n        const newApiReturn = await triviaApi(newToken.token, category, difficulty, type);\n        const { results } = newApiReturn;\n        const incorrectAnswers = results[currQues].incorrect_answers;\n        const correctAnswer = results[currQues].correct_answer;\n\n        if (results[currQues].difficulty === 'easy') {\n          this.setState({ difScore: global.EASY_SCORE });\n        } else if (results[currQues].difficulty === 'medium') {\n          this.setState({ difScore: global.MEDIUM_SCORE });\n        } else if (results[currQues].difficulty === 'hard') {\n          this.setState({ difScore: global.HARD_SCORE });\n        }\n        this.setState({\n          apiReturn: newApiReturn.results,\n          currAnswers: [...incorrectAnswers, correctAnswer]\n            .sort(() => Math.random() - global.RANDOM_ASSIST),\n        });\n        renewToken(newToken);\n      } else {\n        const { results } = apiReturn;\n        const incorrectAnswers = results[currQues].incorrect_answers;\n        const correctAnswer = results[currQues].correct_answer;\n\n        if (results[currQues].difficulty === 'easy') {\n          this.setState({ difScore: global.EASY_SCORE });\n        } else if (results[currQues].difficulty === 'medium') {\n          this.setState({ difScore: global.MEDIUM_SCORE });\n        } else if (results[currQues].difficulty === 'hard') {\n          this.setState({ difScore: global.HARD_SCORE });\n        }\n        this.setState({\n          apiReturn: apiReturn.results,\n          currAnswers: [...incorrectAnswers, correctAnswer]\n            .sort(() => Math.random() - global.RANDOM_ASSIST),\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  handleTimer = () => {\n    clearInterval(this.handleCounter);\n    this.handleCounter = setInterval(() => {\n      this.setState((prevState) => ({ time: prevState.time - 1 }));\n      const { time } = this.state;\n      if (time === 0) {\n        clearInterval(this.handleCounter);\n        this.setState({ isDisabled: true, time: 30, answered: true }, () => {\n          const allButtons = [...document\n            .getElementsByClassName(global.CLASS_BTN)];\n          allButtons.forEach((button) => button.classList.add('wrong'));\n        });\n      }\n    }, global.MIL);\n  };\n\n  answerButton = ({ target }) => {\n    const { updateScore } = this.props;\n    const { time } = this.state;\n    const allButtons = [...document.getElementsByClassName(global.CLASS_BTN)];\n    this.setState({ isDisabled: true });\n    if (target.dataset.testid === global.CORRECT_ANSWER) {\n      const { difScore } = this.state;\n      this.setState((prevState) => ({\n        score: prevState.score + (global.BASE_SCORE + (time * difScore)),\n        assertions: prevState.assertions + 1,\n      }), () => {\n        const { score, assertions } = this.state;\n        updateScore(score, assertions);\n        localStorage.setItem('score', score);\n      });\n    }\n    allButtons.forEach((button) => {\n      if (button.dataset.testid === global.CORRECT_ANSWER) {\n        button.classList.add('correct');\n      } else { button.classList.add('wrong'); }\n    });\n    this.setState({ answered: true });\n    clearInterval(this.handleCounter);\n  }\n\n  redToFeedback = () => {\n    const { history } = this.props;\n    localStorage.setItem('score', 0);\n    history.push('/feedback');\n  }\n\n  nextQuestion = () => {\n    this.setState((prevState) => ({\n      answered: false,\n      currQues: prevState.currQues + 1,\n      isDisabled: false,\n    }), () => {\n      const { currQues } = this.state;\n      const { apiReturn } = this.state;\n      const incorrectAnswers = apiReturn[currQues].incorrect_answers;\n      const correctAnswer = apiReturn[currQues].correct_answer;\n      this.setState({ currAnswers: [...incorrectAnswers, correctAnswer]\n        .sort(() => Math.random() - global.RANDOM_ASSIST),\n      });\n    });\n    const allButtons = [...document\n      .getElementsByClassName('game-main__answer-section__answer')];\n\n    allButtons.forEach((button) => {\n      if (button.dataset.testid === 'correct-answer') {\n        button.classList.remove('correct');\n      } else if (button.dataset.testid.indexOf('wrong') > global.INDEXOF_ASSIST) {\n        button.classList.remove('wrong');\n      }\n    });\n    this.setState({ time: 30 }, () => this.handleTimer());\n  }\n\n  render() {\n    const { apiReturn, currQues, currAnswers, isDisabled, time, answered } = this.state;\n    const isFetching = !apiReturn.length > 0;\n    return (\n      <div className=\"game\">\n        <Header />\n        {\n          isFetching\n            ? <h1 className=\"game-loading\">{global.LOADING}</h1>\n            : (\n              <main className=\"game-main\">\n                <h4\n                  data-testid=\"question-category\"\n                  className=\"game-main__category\"\n                >\n                  {apiReturn[currQues].category}\n                </h4>\n                <h3\n                  data-testid=\"question-text\"\n                  className=\"game-main__question\"\n                >\n                  {decode(apiReturn[currQues].question)}\n                </h3>\n                <section\n                  data-testid=\"answer-options\"\n                  className=\"game-main__answers-section\"\n                >\n                  <Answer\n                    answers={ currAnswers }\n                    isDisabled={ isDisabled }\n                    apiReturn={ apiReturn }\n                    currQues={ currQues }\n                    answerButton={ this.answerButton }\n                  />\n                </section>\n                { answered\n                && (currQues < global.QUESTIONS_LENGTH - 1\n                  ? (\n                    <button\n                      type=\"button\"\n                      data-testid=\"btn-next\"\n                      className=\"game-main__next-button\"\n                      onClick={ this.nextQuestion }\n                    >\n                      Next!\n                    </button>)\n                  : (\n                    <button\n                      type=\"button\"\n                      data-testid=\"btn-next\"\n                      className=\"game-main__next-button\"\n                      onClick={ this.redToFeedback }\n                    >\n                      Final Feedback\n                    </button>))}\n              </main>\n            )\n        }\n        <footer className=\"footerTime\">\n          <h4>{ `Timer:  ${time}`}</h4>\n        </footer>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  renewToken: propTypes.func,\n  token: propTypes.object,\n}.isRequired;\n\nconst mapStateToProps = (state) => {\n  const { token,\n    player: { score },\n    settings: { category, difficulty, type },\n  } = state;\n  return { token, score, category, difficulty, type };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  renewToken(token) { dispatch(tokenAction(token)); },\n  updateScore(score, assertions) { dispatch(scoreAction(score, assertions)); },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { settingsAction } from '../redux/actions';\nimport './style/Settings.css';\n\nclass Settings extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      category: '',\n      difficulty: '',\n      type: '',\n    };\n  }\n\n  handleSelect = ({ target }) => {\n    const { value, id } = target;\n    this.setState({ [id]: value });\n  }\n\n  saveSettings = () => {\n    const { setSettings } = this.props;\n    const { category, difficulty, type } = this.state;\n    setSettings(\n      `&category=${category}`,\n      `&difficulty=${difficulty}`,\n      `&type=${type}`,\n    );\n    window.alert('Settings Saved!');\n  }\n\n  homeButton = () => {\n    const { history } = this.props;\n    history.push('/project-game-trivia');\n  }\n\n  render() {\n    return (\n      <div data-testid=\"settings-title\" className=\"settingsScreen\">\n        <h1 className=\"headerSettings\">Settings</h1>\n        <section className=\"container\">\n          <label htmlFor=\"category\" className=\"settings__label\">\n            Questions Category:\n            <select className=\"select\" id=\"category\" onChange={ this.handleSelect }>\n              <option value=\"any\">Any Category</option>\n              <option value=\"9\">General Knowledge</option>\n              <option value=\"10\">Entertainment: Books</option>\n              <option value=\"11\">Entertainment: Film</option>\n              <option value=\"12\">Entertainment: Music</option>\n              <option value=\"13\">Entertainment: Musicals &amp; Theatres</option>\n              <option value=\"14\">Entertainment: Television</option>\n              <option value=\"15\">Entertainment: Video Games</option>\n              <option value=\"16\">Entertainment: Board Games</option>\n              <option value=\"17\">Science &amp; Nature</option>\n              <option value=\"18\">Science: Computers</option>\n              <option value=\"19\">Science: Mathematics</option>\n              <option value=\"20\">Mythology</option>\n              <option value=\"21\">Sports</option>\n              <option value=\"22\">Geography</option>\n              <option value=\"23\">History</option>\n              <option value=\"24\">Politics</option>\n              <option value=\"25\">Art</option>\n              <option value=\"26\">Celebrities</option>\n              <option value=\"27\">Animals</option>\n              <option value=\"28\">Vehicles</option>\n              <option value=\"29\">Entertainment: Comics</option>\n              <option value=\"30\">Science: Gadgets</option>\n              <option value=\"31\">Entertainment: Japanese Anime &amp; Manga</option>\n              <option value=\"32\">Entertainment: Cartoon &amp; Animations</option>\n            </select>\n          </label>\n          <label htmlFor=\"difficulty\" className=\"settings__label\">\n            Difficulty:\n            <select className=\"select\" id=\"difficulty\" onChange={ this.handleSelect }>\n              <option value=\"any\">Any difficulty</option>\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </label>\n          <label htmlFor=\"type\" className=\"settings__label\">\n            Questions Type:\n            <select className=\"select\" id=\"type\" onChange={ this.handleSelect }>\n              <option value=\"any\">Any type</option>\n              <option value=\"multiple\">Multiple choice</option>\n              <option value=\"boolean\">True / False</option>\n            </select>\n          </label>\n\n          <div className=\"btns\">\n            <button\n              className=\"btn1\"\n              type=\"button\"\n              onClick={ this.saveSettings }\n            >\n              Save Settings\n            </button>\n            <button\n              className=\"btn2\"\n              type=\"button\"\n              onClick={ this.homeButton }\n            >\n              Home\n            </button>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  push: propTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  setSettings(category, difficulty, type) {\n    dispatch(settingsAction(category, difficulty, type));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { playerAction, scoreAction } from '../redux/actions';\nimport * as global from '../consts';\nimport './style/Feedback.css';\nimport Header from '../components/Header';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      scoreFeedback: '',\n    };\n  }\n\n  componentDidMount() {\n    this.resultsHandler();\n  }\n\n  resultsHandler = () => {\n    const { assertions } = this.props;\n\n    if (assertions < global.ASSERTIONS) {\n      this.setState({ scoreFeedback: 'Could be better...' });\n    } else if (assertions >= global.ASSERTIONS) {\n      this.setState({ scoreFeedback: 'Well Done!' });\n    }\n  }\n\n  playAgain = () => {\n    const { history, resetGame } = this.props;\n    resetGame(0, 0, {});\n    history.push('/project-game-trivia');\n  }\n\n  toRankingPage = () => {\n    const { history } = this.props;\n    history.push('/ranking');\n  }\n\n  render() {\n    const { scoreFeedback } = this.state;\n    const { score, assertions } = this.props;\n    return (\n      <div className=\"feedback\">\n        <Header />\n        <section className=\"container\">\n          <h1>\n            Score:\n            {' '}\n            <span data-testid=\"feedback-total-score\">{score}</span>\n          </h1>\n          <h1>\n            Assertions:\n            {' '}\n            <span data-testid=\"feedback-total-question\">{assertions}</span>\n          </h1>\n          <h1 data-testid=\"feedback-text\">\n            { scoreFeedback }\n          </h1>\n          <button\n            className=\"btn\"\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={ this.playAgain }\n          >\n            Play again!\n          </button>\n          <button\n            className=\"btn\"\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            onClick={ this.toRankingPage }\n          >\n            Ranking\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  score: propTypes.number,\n  assertions: propTypes.number,\n  resetGame: propTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetGame(resetS, resetA, resetP) {\n    dispatch(scoreAction(resetS, resetA));\n    dispatch(playerAction(resetP));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { playerAction, scoreAction } from '../redux/actions';\nimport './style/Ranking.css';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ranking: [],\n    };\n  }\n\n  componentDidMount() {\n    this.handleRanking();\n  }\n\n  handleRanking = async () => {\n    const { name, score, picture } = this.props;\n\n    if (name) {\n      if (localStorage.getItem('ranking')) {\n        localStorage.setItem('ranking', JSON.stringify(\n          [\n            ...JSON.parse(localStorage.getItem('ranking')),\n            {\n              name, score, picture,\n            },\n          ],\n        ));\n      } else {\n        localStorage.setItem('ranking', JSON.stringify(\n          [\n            {\n              name, score, picture,\n            },\n          ],\n        ));\n      }\n    }\n    this.setState({ ranking: JSON.parse(localStorage.getItem('ranking')) });\n  }\n\n  goHome = () => {\n    const { history, resetGame } = this.props;\n    resetGame(0, 0, {});\n    history.push('/project-game-trivia');\n  }\n\n  render() {\n    const { ranking } = this.state;\n    return (\n      <div className=\"ranking\">\n        <section className=\"container\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <ul className=\"ranking-players\">\n            {ranking.sort((a, b) => b.score - a.score).map((player, i) => (\n              <li key={ i }>\n                <h4>\n                  Name:\n                  {' '}\n                  <span data-testid={ `player-name-${i}` }>{player.name}</span>\n                </h4>\n                <h4>\n                  Score:\n                  {' '}\n                  <span data-testid={ `player-score-${i}` }>{player.score}</span>\n                </h4>\n              </li>\n            ))}\n          </ul>\n          <button\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            className=\"btn\"\n            onClick={ this.goHome }\n          >\n            Home\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  score: propTypes.number,\n  assertions: propTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n  assertions: state.player.assertions,\n  picture: `${md5(state.player.assertions).toString()}`,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetGame(resetS, resetA, resetP) {\n    dispatch(scoreAction(resetS, resetA));\n    dispatch(playerAction(resetP));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/project-game-trivia\" component={ Login } />\n      <Route exact path=\"/game\" component={ Game } />\n      <Route exact path=\"/settings\" component={ Settings } />\n      <Route exact path=\"/feedback\" component={ Feedback } />\n      <Route exact path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","import { LOG_IN, SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOG_IN:\n    return action.player;\n  case SCORE:\n    return {\n      ...state,\n      score: action.score,\n      assertions: action.assertions,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { SETTINGS } from '../actions';\n\nconst INITIAL_STATE = {\n  category: '',\n  difficulty: '',\n  type: '',\n};\n\nconst settingsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SETTINGS:\n    return {\n      ...state,\n      category: action.category,\n      difficulty: action.difficulty,\n      type: action.qType,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default settingsReducer;\n","import { TOKEN } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nconst tokenReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TOKEN:\n    return action.token;\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { combineReducers } from 'redux';\nimport playerReducer from './Player';\nimport settingsReducer from './Settings';\nimport tokenReducer from './Token';\n\nconst rootReducer = combineReducers({\n  player: playerReducer,\n  token: tokenReducer,\n  settings: settingsReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Router>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}