{"version":3,"sources":["trivia.png","redux/actions/index.js","services/tokenApi.js","pages/Login.js","components/Header.js","services/triviaApi.js","consts/index.js","pages/Game.js","pages/Settings.js","pages/Feedback.js","pages/Ranking.js","App.js","redux/reducers/Player.js","redux/reducers/Settings.js","redux/reducers/Token.js","redux/reducers/index.js","redux/store/index.js","index.js"],"names":["module","exports","tokenAction","state","type","token","playerAction","player","scoreAction","score","assertions","requestToken","a","fetch","response","json","data","Login","handleButton","callback","setState","localStorage","setItem","props","history","push","roteSettings","name","gravatarEmail","handleInput","bind","target","id","value","this","handleClick","className","src","logo","alt","htmlFor","data-testid","placeholder","onChange","disabled","includes","onClick","Component","connect","dispatch","Header","convertEmail","emailHash","md5","toString","fetchQuestions","category","difficulty","url","console","error","CLASS_BTN","Game","getQuestions","renewToken","currQues","triviaApi","apiReturn","log","response_code","newToken","newApiReturn","results","incorrectAnswers","incorrect_answers","correctAnswer","correct_answer","difScore","currAnswers","sort","Math","random","handleTimer","clearInterval","handleCounter","setInterval","prevState","time","isDisabled","answered","document","getElementsByClassName","global","forEach","button","classList","add","answerButton","updateScore","allButtons","dataset","testid","redToFeedback","nextQuestion","remove","indexOf","isFetching","length","decode","question","map","answer","i","key","match","settings","Settings","handleSelect","saveSettings","setSettings","homeButton","qType","settingsAction","Feedback","resultsHandler","scoreFeedback","playAgain","resetGame","toRankingPage","resetS","resetA","resetP","Ranking","handleRanking","picture","getItem","JSON","stringify","parse","ranking","goHome","b","App","exact","path","component","INITIAL_STATE","playerReducer","action","settingsReducer","tokenReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4771d8fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","export const LOG_IN = 'LOG_IN';\nexport const TOKEN = 'TOKEN';\nexport const SCORE = 'SCORE';\nexport const SETTINGS = 'SETTINGS';\n\nexport const tokenAction = (state) => ({\n  type: TOKEN,\n  token: state,\n});\n\nexport const playerAction = (state) => ({\n  type: LOG_IN,\n  player: state,\n});\n\nexport const scoreAction = (score, assertions) => ({\n  type: SCORE,\n  score,\n  assertions,\n});\n\nexport const settingsAction = (category, difficulty, qType) => ({\n  type: SETTINGS,\n  category,\n  difficulty,\n  qType,\n});\n","const link = 'https://opentdb.com/api_token.php?command=request';\nconst requestToken = async () => {\n  try {\n    const response = await fetch(link);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default requestToken;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { tokenAction, playerAction } from '../redux/actions';\nimport requestToken from '../services/tokenApi';\nimport logo from '../trivia.png';\nimport './style/Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      token: '',\n      name: '',\n      assertions: 0,\n      score: 0,\n      gravatarEmail: '',\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  handleButton = async (callback) => {\n    const data = await requestToken();\n    this.setState({ token: data.token }, () => {\n      callback(this.state);\n    });\n    localStorage.setItem('token', data.token);\n    const { history } = this.props;\n    history.push('/game');\n  }\n\n  roteSettings = () => {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  handleInput({ target }) {\n    const { id, value } = target;\n\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  render() {\n    const { name, gravatarEmail } = this.state;\n    const { handleClick } = this.props;\n    return (\n      <div className=\"login\">\n        <form className=\"form\">\n          <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n          <label htmlFor=\"name\" className=\"form__label\">\n            <input\n              id=\"name\"\n              data-testid=\"input-player-name\"\n              placeholder=\"Name\"\n              value={ name }\n              onChange={ this.handleInput }\n              className=\"form__label__input\"\n            />\n          </label>\n          <label htmlFor=\"email\" className=\"form__label\">\n            <input\n              id=\"gravatarEmail\"\n              data-testid=\"input-gravatar-email\"\n              placeholder=\"Email\"\n              value={ gravatarEmail }\n              onChange={ this.handleInput }\n              className=\"form__label__input\"\n            />\n          </label>\n          <section className=\"buttons\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-play\"\n              disabled={\n                !name\n                || !gravatarEmail\n                || !gravatarEmail.includes('@')\n                || !gravatarEmail.includes('.com')\n              }\n              onClick={ () => this.handleButton(handleClick) }\n              className=\"form__button\"\n            >\n              Play!\n            </button>\n            <button\n              type=\"button\"\n              data-testid=\"btn-settings\"\n              onClick={ () => this.roteSettings() }\n              className=\"form__button settings\"\n            >\n              Settings\n            </button>\n          </section>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  handleClick(state) {\n    dispatch(playerAction(state));\n    dispatch(tokenAction(state.token));\n  },\n});\n\nLogin.propTypes = {\n  handleClick: PropTypes.func,\n  push: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport '../pages/style/Header.css';\n\nclass Header extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      emailHash: '',\n    };\n  }\n\n  componentDidMount() {\n    this.convertEmail();\n  }\n\n  convertEmail = () => {\n    const { gravatarEmail } = this.props;\n    this.setState({ emailHash: md5(gravatarEmail).toString() });\n  }\n\n  render() {\n    const { name, score } = this.props;\n    const { emailHash } = this.state;\n\n    return (\n      <header className=\"header\">\n        <img\n          data-testid=\"header-profile-picture\"\n          alt=\"profile_image\"\n          src={ `https://www.gravatar.com/avatar/${emailHash}` }\n        />\n        <h1 className=\"name\">\n          Player:\n          {' '}\n          <span data-testid=\"header-player-name\">{ name }</span>\n        </h1>\n        <h2 className=\"score\">\n          Score:\n          {' '}\n          <span data-testid=\"header-score\">{ score }</span>\n        </h2>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: propTypes.string,\n  gravatarEmail: propTypes.string,\n  assertions: propTypes.number,\n  score: propTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => {\n  const { player: { name, gravatarEmail, assertions, score } } = state;\n  return {\n    name, gravatarEmail, assertions, score,\n  };\n};\n\nexport default connect(mapStateToProps)(Header);\n","const fetchQuestions = async (token, category, difficulty, type) => {\n  try {\n    const url = `https://opentdb.com/api.php?amount=5&token=${token}&category=${category}&difficulty=${difficulty}&type=${type}`;\n    const response = await fetch(url);\n    const data = response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport default fetchQuestions;\n","export const ERROR_RESPONSE = 3;\nexport const QUESTIONS_LENGTH = 5;\nexport const RANDOM_ASSIST = 0.5;\nexport const INDEXOF_ASSIST = -1;\nexport const MIL = 1000;\nexport const LOADING = 'Loading...';\nexport const CORRECT_ANSWER = 'correct-answer';\nexport const BASE_SCORE = 10;\nexport const EASY_SCORE = 1;\nexport const MEDIUM_SCORE = 2;\nexport const HARD_SCORE = 3;\nexport const CLASS_BTN = 'game-main__answer-section__answer';\nexport const ASSERTIONS = 3;\n","import propTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { decode } from 'he';\nimport Header from '../components/Header';\nimport triviaApi from '../services/triviaApi';\nimport { tokenAction, scoreAction } from '../redux/actions';\nimport requestToken from '../services/tokenApi';\nimport * as global from '../consts';\nimport './style/Game.css';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = { apiReturn: [],\n      currAnswers: [],\n      currQues: 0,\n      time: 30,\n      isDisabled: false,\n      score: 0,\n      assertions: 0,\n      difScore: 0,\n      answered: false };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.handleTimer();\n  }\n\n  getQuestions = async () => {\n    const { token, renewToken, category, difficulty, type } = this.props;\n    const { currQues } = this.state;\n    const apiReturn = await triviaApi(token, category, difficulty, type);\n    console.log(apiReturn);\n    console.log(token);\n\n    if (apiReturn.response_code === global.ERROR_RESPONSE) {\n      const newToken = await requestToken();\n      const newApiReturn = await triviaApi(newToken.token, category, difficulty, type);\n      const { results } = newApiReturn;\n      const incorrectAnswers = results[currQues].incorrect_answers;\n      const correctAnswer = results[currQues].correct_answer;\n\n      if (results[currQues].difficulty === 'easy') {\n        this.setState({ difScore: global.EASY_SCORE });\n      } else if (results[currQues].difficulty === 'medium') {\n        this.setState({ difScore: global.MEDIUM_SCORE });\n      } else if (results[currQues].difficulty === 'hard') {\n        this.setState({ difScore: global.HARD_SCORE });\n      }\n      this.setState({\n        apiReturn: newApiReturn.results,\n        currAnswers: [...incorrectAnswers, correctAnswer]\n          .sort(() => Math.random() - global.RANDOM_ASSIST),\n      });\n      renewToken(newToken);\n    } else {\n      const { results } = apiReturn;\n      const incorrectAnswers = results[currQues].incorrect_answers;\n      const correctAnswer = results[currQues].correct_answer;\n\n      if (results[currQues].difficulty === 'easy') {\n        this.setState({ difScore: global.EASY_SCORE });\n      } else if (results[currQues].difficulty === 'medium') {\n        this.setState({ difScore: global.MEDIUM_SCORE });\n      } else if (results[currQues].difficulty === 'hard') {\n        this.setState({ difScore: global.HARD_SCORE });\n      }\n      this.setState({\n        apiReturn: apiReturn.results,\n        currAnswers: [...incorrectAnswers, correctAnswer]\n          .sort(() => Math.random() - global.RANDOM_ASSIST),\n      });\n    }\n  }\n\n  handleTimer = () => {\n    clearInterval(this.handleCounter);\n    this.handleCounter = setInterval(() => {\n      this.setState((prevState) => ({ time: prevState.time - 1 }));\n      const { time } = this.state;\n      if (time === 0) {\n        clearInterval(this.handleCounter);\n        this.setState({ isDisabled: true, time: 30, answered: true }, () => {\n          const allButtons = [...document\n            .getElementsByClassName(global.CLASS_BTN)];\n          allButtons.forEach((button) => button.classList.add('wrong'));\n        });\n      }\n    }, global.MIL);\n  };\n\n  answerButton = ({ target }) => {\n    const { updateScore } = this.props;\n    const { time } = this.state;\n    const allButtons = [...document.getElementsByClassName(global.CLASS_BTN)];\n    this.setState({ isDisabled: true });\n    if (target.dataset.testid === global.CORRECT_ANSWER) {\n      const { difScore } = this.state;\n      this.setState((prevState) => ({\n        score: prevState.score + (global.BASE_SCORE + (time * difScore)),\n        assertions: prevState.assertions + 1,\n      }), () => {\n        const { score, assertions } = this.state;\n        updateScore(score, assertions);\n        localStorage.setItem('score', score);\n      });\n    }\n    allButtons.forEach((button) => {\n      if (button.dataset.testid === global.CORRECT_ANSWER) {\n        button.classList.add('correct');\n      } else { button.classList.add('wrong'); }\n    });\n    this.setState({ answered: true });\n    clearInterval(this.handleCounter);\n  }\n\n  redToFeedback = () => {\n    const { history } = this.props;\n    localStorage.setItem('score', 0);\n    history.push('/feedback');\n  }\n\n  nextQuestion = () => {\n    this.setState((prevState) => ({\n      answered: false,\n      currQues: prevState.currQues + 1,\n      isDisabled: false,\n    }), () => {\n      const { currQues } = this.state;\n      const { apiReturn } = this.state;\n      const incorrectAnswers = apiReturn[currQues].incorrect_answers;\n      const correctAnswer = apiReturn[currQues].correct_answer;\n      this.setState({\n        currAnswers: [...incorrectAnswers, correctAnswer]\n          .sort(() => Math.random() - global.RANDOM_ASSIST),\n      });\n    });\n    const allButtons = [...document\n      .getElementsByClassName('game-main__answer-section__answer')];\n\n    allButtons.forEach((button) => {\n      if (button.dataset.testid === 'correct-answer') {\n        button.classList.remove('correct');\n      } else if (button.dataset.testid.indexOf('wrong') > global.INDEXOF_ASSIST) {\n        button.classList.remove('wrong');\n      }\n    });\n    this.setState({ time: 30 }, () => this.handleTimer());\n  }\n\n  render() {\n    const { apiReturn, currQues, currAnswers, isDisabled, time, answered } = this.state;\n    const isFetching = !apiReturn.length > 0;\n\n    return (\n      <div className=\"game\">\n        <Header />\n        {\n          isFetching\n            ? <h1 className=\"game-loading\">{global.LOADING}</h1>\n            : (\n              <main className=\"game-main\">\n                <h4\n                  data-testid=\"question-category\"\n                  className=\"game-main__category\"\n                >\n                  {apiReturn[currQues].category}\n                </h4>\n                <h3\n                  data-testid=\"question-text\"\n                  className=\"game-main__question\"\n                >\n                  {decode(apiReturn[currQues].question)}\n                </h3>\n                <section\n                  data-testid=\"answer-options\"\n                  className=\"game-main__answers-section\"\n                >\n                  {currAnswers\n                    .map((answer, i) => (\n                      <button\n                        type=\"button\"\n                        key={ i }\n                        data-testid={\n                          answer.match(apiReturn[currQues].correct_answer)\n                            ? 'correct-answer'\n                            : `wrong-answer-${i}`\n                        }\n                        className=\"game-main__answer-section__answer\"\n                        disabled={ isDisabled }\n                        onClick={ this.answerButton }\n                      >\n                        {answer}\n                      </button>\n                    ))}\n                </section>\n                { answered\n                && (currQues < global.QUESTIONS_LENGTH - 1\n                  ? (\n                    <button\n                      type=\"button\"\n                      data-testid=\"btn-next\"\n                      className=\"game-main__next-button\"\n                      onClick={ this.nextQuestion }\n                    >\n                      Próxima questão\n                    </button>)\n                  : (\n                    <button\n                      type=\"button\"\n                      data-testid=\"btn-next\"\n                      className=\"game-main__next-button\"\n                      onClick={ this.redToFeedback }\n                    >\n                      Feedback final\n                    </button>))}\n              </main>\n            )\n        }\n        <footer className=\"footerTime\">\n          <h4>{ `Timer:  ${time}`}</h4>\n        </footer>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  renewToken: propTypes.func,\n  token: propTypes.object,\n}.isRequired;\n\nconst mapStateToProps = (state) => {\n  const {\n    token,\n    player: { score },\n    settings: { category, difficulty, type },\n  } = state;\n  return { token, score, category, difficulty, type };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  renewToken(token) { dispatch(tokenAction(token)); },\n  updateScore(score, assertions) { dispatch(scoreAction(score, assertions)); },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { settingsAction } from '../redux/actions';\n\nclass Settings extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      category: '',\n      difficulty: '',\n      type: '',\n    };\n  }\n\n  componentDidMount() {\n    this.saveSettings();\n  }\n\n  handleSelect = ({ target }) => {\n    const { value, id } = target;\n    this.setState({ [id]: value });\n  }\n\n  saveSettings = () => {\n    const { setSettings } = this.props;\n    const { category, difficulty, type } = this.state;\n    setSettings(\n      `&category=${category}`,\n      `&difficulty=${difficulty}`,\n      `&type=${type}`,\n    );\n  }\n\n  homeButton = () => {\n    const { history } = this.props;\n    history.push('/project-game-trivia');\n  }\n\n  render() {\n    return (\n      <div data-testid=\"settings-title\" className=\"settings\">\n        <h1 className=\"headerSettings\">Settings</h1>\n        <section>\n          <label htmlFor=\"category\">\n            Questions Category\n            <select id=\"category\" onChange={ this.handleSelect }>\n              <option value=\"any\">Any Category</option>\n              <option value=\"9\">General Knowledge</option>\n              <option value=\"10\">Entertainment: Books</option>\n              <option value=\"11\">Entertainment: Film</option>\n              <option value=\"12\">Entertainment: Music</option>\n              <option value=\"13\">Entertainment: Musicals &amp; Theatres</option>\n              <option value=\"14\">Entertainment: Television</option>\n              <option value=\"15\">Entertainment: Video Games</option>\n              <option value=\"16\">Entertainment: Board Games</option>\n              <option value=\"17\">Science &amp; Nature</option>\n              <option value=\"18\">Science: Computers</option>\n              <option value=\"19\">Science: Mathematics</option>\n              <option value=\"20\">Mythology</option>\n              <option value=\"21\">Sports</option>\n              <option value=\"22\">Geography</option>\n              <option value=\"23\">History</option>\n              <option value=\"24\">Politics</option>\n              <option value=\"25\">Art</option>\n              <option value=\"26\">Celebrities</option>\n              <option value=\"27\">Animals</option>\n              <option value=\"28\">Vehicles</option>\n              <option value=\"29\">Entertainment: Comics</option>\n              <option value=\"30\">Science: Gadgets</option>\n              <option value=\"31\">Entertainment: Japanese Anime &amp; Manga</option>\n              <option value=\"32\">Entertainment: Cartoon &amp; Animations</option>\n            </select>\n          </label>\n          <label htmlFor=\"difficulty\">\n            Difficulty\n            <select id=\"difficulty\" onChange={ this.handleSelect }>\n              <option value=\"any\">Any difficulty</option>\n              <option value=\"easy\">Easy</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"hard\">Hard</option>\n            </select>\n          </label>\n          <label htmlFor=\"type\">\n            Questions Type\n            <select id=\"type\" onChange={ this.handleSelect }>\n              <option value=\"any\">Any type</option>\n              <option value=\"multiple\">Multiple choice</option>\n              <option value=\"boolean\">True / False</option>\n            </select>\n          </label>\n        </section>\n        <button\n          type=\"button\"\n          onClick={ this.saveSettings }\n        >\n          Save Settings\n        </button>\n        <button\n          type=\"button\"\n          onClick={ this.homeButton }\n        >\n          Home\n        </button>\n      </div>\n    );\n  }\n}\n\nSettings.propTypes = {\n  push: propTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  setSettings(category, difficulty, type) {\n    dispatch(settingsAction(category, difficulty, type));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { playerAction, scoreAction } from '../redux/actions';\nimport * as global from '../consts';\nimport './style/Feedback.css';\nimport Header from '../components/Header';\n\nclass Feedback extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      scoreFeedback: '',\n    };\n  }\n\n  componentDidMount() {\n    this.resultsHandler();\n  }\n\n  resultsHandler = () => {\n    const { assertions } = this.props;\n\n    if (assertions < global.ASSERTIONS) {\n      this.setState({ scoreFeedback: 'Could be better...' });\n    } else if (assertions >= global.ASSERTIONS) {\n      this.setState({ scoreFeedback: 'Well Done!' });\n    }\n  }\n\n  playAgain = () => {\n    const { history, resetGame } = this.props;\n    resetGame(0, 0, {});\n    history.push('/project-game-trivia');\n  }\n\n  toRankingPage = () => {\n    const { history } = this.props;\n    history.push('/ranking');\n  }\n\n  render() {\n    const { scoreFeedback } = this.state;\n    const { score, assertions } = this.props;\n    return (\n      <div className=\"feedback\">\n        <Header />\n        <section className=\"container\">\n          <h1>\n            Score:\n            {' '}\n            <span data-testid=\"feedback-total-score\">{score}</span>\n          </h1>\n          <h1>\n            Assertions:\n            {' '}\n            <span data-testid=\"feedback-total-question\">{assertions}</span>\n          </h1>\n          <h1 data-testid=\"feedback-text\">\n            { scoreFeedback }\n          </h1>\n          <button\n            className=\"btn\"\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            onClick={ this.toRankingPage }\n          >\n            Ranking\n          </button>\n          <button\n            className=\"btn\"\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={ this.playAgain }\n          >\n            Play again!\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  score: propTypes.number,\n  assertions: propTypes.number,\n  resetGame: propTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetGame(resetS, resetA, resetP) {\n    dispatch(scoreAction(resetS, resetA));\n    dispatch(playerAction(resetP));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport { playerAction, scoreAction } from '../redux/actions';\nimport './style/Ranking.css';\n\nclass Ranking extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      ranking: [],\n    };\n  }\n\n  componentDidMount() {\n    this.handleRanking();\n  }\n\n  handleRanking = async () => {\n    const { name, score, picture } = this.props;\n\n    if (name) {\n      if (localStorage.getItem('ranking')) {\n        localStorage.setItem('ranking', JSON.stringify(\n          [\n            ...JSON.parse(localStorage.getItem('ranking')),\n            {\n              name, score, picture,\n            },\n          ],\n        ));\n      } else {\n        localStorage.setItem('ranking', JSON.stringify(\n          [\n            {\n              name, score, picture,\n            },\n          ],\n        ));\n      }\n    }\n    this.setState({ ranking: JSON.parse(localStorage.getItem('ranking')) });\n  }\n\n  goHome = () => {\n    const { history, resetGame } = this.props;\n    resetGame(0, 0, {});\n    history.push('/project-game-trivia');\n  }\n\n  render() {\n    const { ranking } = this.state;\n    return (\n      <div className=\"ranking\">\n        <section className=\"container\">\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <ul className=\"ranking-players\">\n            {ranking.sort((a, b) => b.score - a.score).map((player, i) => (\n              <li key={ i }>\n                <h4>\n                  Name:\n                  {' '}\n                  <span data-testid={ `player-name-${i}` }>{player.name}</span>\n                </h4>\n                <h4>\n                  Score:\n                  {' '}\n                  <span data-testid={ `player-score-${i}` }>{player.score}</span>\n                </h4>\n              </li>\n            ))}\n          </ul>\n          <button\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            className=\"btn\"\n            onClick={ this.goHome }\n          >\n            Home\n          </button>\n        </section>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  score: propTypes.number,\n  assertions: propTypes.number,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  score: state.player.score,\n  assertions: state.player.assertions,\n  picture: `${md5(state.player.assertions).toString()}`,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetGame(resetS, resetA, resetP) {\n    dispatch(scoreAction(resetS, resetA));\n    dispatch(playerAction(resetP));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Ranking);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Settings from './pages/Settings';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/project-game-trivia\" component={ Login } />\n      <Route exact path=\"/game\" component={ Game } />\n      <Route exact path=\"/settings\" component={ Settings } />\n      <Route exact path=\"/feedback\" component={ Feedback } />\n      <Route exact path=\"/ranking\" component={ Ranking } />\n    </Switch>\n  );\n}\n","import { LOG_IN, SCORE } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst playerReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case LOG_IN:\n    return action.player;\n  case SCORE:\n    return {\n      ...state,\n      score: action.score,\n      assertions: action.assertions,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { SETTINGS } from '../actions';\n\nconst INITIAL_STATE = {\n  category: '',\n  difficulty: '',\n  type: '',\n};\n\nconst settingsReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SETTINGS:\n    return {\n      ...state,\n      category: action.category,\n      difficulty: action.difficulty,\n      type: action.qType,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default settingsReducer;\n","import { TOKEN } from '../actions';\n\nconst INITIAL_STATE = {\n  token: '',\n};\n\nconst tokenReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case TOKEN:\n    return action.token;\n  default:\n    return state;\n  }\n};\n\nexport default tokenReducer;\n","import { combineReducers } from 'redux';\nimport playerReducer from './Player';\nimport settingsReducer from './Settings';\nimport tokenReducer from './Token';\n\nconst rootReducer = combineReducers({\n  player: playerReducer,\n  token: tokenReducer,\n  settings: settingsReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Router>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}